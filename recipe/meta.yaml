{% set name = "sf-hamilton" %}
{% set version = "1.35.1" %}


package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/sf-hamilton-{{ version }}.tar.gz
  sha256: 9dda6ed13c829cedda02eda0713f17995ea23a8511f7a32df61d9744c249ee60


build:
  number: 0
  script: {{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation
  skip: True #[py<36]

requirements:
  host:
    - pip
    - python
    - wheel
  run:
    - numpy
    - pandas
    - python
    - typing_extensions >4.0.0
    - typing_inspect

test:
  imports:
    - hamilton
  commands:
    - pip check
  requires:
    - pip

about:
  doc_url: https://hamilton.dagworks.io/en/latest/
  dev_url: https://github.com/DAGWorks-Inc/hamilton
  home: https://hamilton.dagworks.io/en/latest/
  license: BSD-3-Clause-Clear
  license_family: BSD
  license_file: LICENSE
  summary: The general purpose micro-orchestration framework for creating dataflows from python functions.
           That is, your single tool to express things like data, ML, LLM pipelines/workflows, and even web request logic.
  description: Hamilton is a novel paradigm for specifying a flow of delayed execution in python. It works on python objects
               of any type and dataflows of any complexity. Core to the design of Hamilton is a clear mapping of function
               name to artifact, allowing you to quickly grok the relationship between the code you write and the data you
               produce. This paradigm makes modifications easy to build and track, ensures code is self-documenting, and
               makes it natural to unit test your data transformations. When connected together, these functions form
               a Directed Acyclic Graph (DAG), which the Hamilton framework can execute, optimize, and report on.

extra:
  recipe-maintainers:
    - thewchan
    - aniedzielaAnaconda
